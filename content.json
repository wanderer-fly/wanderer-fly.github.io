{"meta":{"title":"小圆帽の部落格","subtitle":"","description":"","author":"蹦蹦小圆帽","url":"https://wanderer-fly.github.io","root":"/"},"pages":[{"title":"文章归档","date":"2025-08-19T16:19:25.651Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"archive.html","permalink":"https://wanderer-fly.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2025-08-19T16:19:25.651Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"custom.css","permalink":"https://wanderer-fly.github.io/custom.css","excerpt":"","text":"body { overflow-x: hidden; } #nexmoe-content .nexmoe-post-footer { background-color: transparent; } iframe { width: 100%!important; } :root { --gutter: 24px; --radius: 13px; --color-primary: #009dff; --color2: #1ea5ff; --color3: #ffb900; --color4: #33d57a; --color5: #00dbff; --color6: #1a98ff; --color7: #9090ff; --color-primary-bg: rgba(255, 78, 106, 0.15); --color2-bg: rgba(255, 118, 30, 0.15); --color3-bg: rgba(255, 185, 0, 0.15); --color4-bg: rgba(51, 213, 122, 0.15); --color5-bg: rgba(0, 219, 255, 0.15); --color6-bg: rgba(26, 152, 255, 0.15); --color7-bg: rgba(144, 144, 255, 0.15); --color-shadow: rgba(161, 177, 204, 0.4); --color-card: #ffffff; --color-text-1: #111; --color-text-2: #505050; --color-text-3: #434343; } #nexmoe-background { .nexmoe-bg { /* opacity: 1; */ filter: blur(0px); background-color: #ffffff1d; } } .nexmoe-toc { border: 1px solid #b5b5b5; background-color: #f4f4f4ce; backdrop-filter: blur(20px); /* filter: blur(20px); */ } .nexmoefont { background-color: #ffffff00; /* backdrop-filter: blur(20px); */ } .nexmoe-post-copyright { background-color: #f4f4f4b9; } .nexmoe-primary { /* background-color: #ffffff5c; */ backdrop-filter: blur(10px); } .nexmoe-drawer { background-color: #ffffff97; backdrop-filter: blur(10px); } .mdui-list-item-content { color: #767676; } .nexmoe #nexmoe-header .nexmoe-list .nexmoe-list-item.true { box-shadow: 0 1px 2px var(--color-primary); } .nexmoe-search input { transition: all 0.3s ease; } .nexmoe-search input:hover { border: 1px solid #009dff; background-color: rgba(0, 0, 0, 0.05); border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); }"},{"title":"朋友","date":"2019-02-01T12:03:41.000Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"friends.html","permalink":"https://wanderer-fly.github.io/friends.html","excerpt":"","text":""}],"posts":[{"title":"Apex被傻逼EA误封然后等误解","slug":"github-ssh-tutorial","date":"2025-08-19T16:30:00.000Z","updated":"2025-08-19T16:31:41.649Z","comments":true,"path":"2025/08/20/github-ssh-tutorial/","permalink":"https://wanderer-fly.github.io/2025/08/20/github-ssh-tutorial/","excerpt":"","text":"GitHub 配置 SSH 密钥教程在日常开发中，我们经常需要把本地代码推送到 GitHub。如果每次都输入用户名和密码会非常麻烦，甚至在 2021 年 GitHub 已经禁用了账号密码推送功能，推荐使用 SSH Key 来进行身份验证。下面记录一下配置步骤。 1. 检查是否已有 SSH Key在终端执行以下命令： 1ls -al ~/.ssh 如果输出中包含 id_rsa、id_rsa.pub 或 id_ed25519、id_ed25519.pub 文件，说明你已经生成过 SSH Key，可以直接跳到 步骤 3。 2. 生成新的 SSH Key如果没有现成的密钥，执行以下命令生成（推荐使用 ed25519 算法，更安全）： 1ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; 其中 your_email@example.com 替换为你在 GitHub 注册时使用的邮箱。 执行后会提示保存路径，直接回车即可，默认保存在 ~/.ssh/id_ed25519。如果想设置密码短语（passphrase）可以输入，也可以留空。 3. 启动 SSH Agent 并添加 Key确保 ssh-agent 正在运行： 1eval &quot;$(ssh-agent -s)&quot; 然后添加密钥： 1ssh-add ~/.ssh/id_ed25519 4. 将公钥添加到 GitHub复制公钥内容： 1cat ~/.ssh/id_ed25519.pub 然后进入 GitHub 网站： 点击右上角头像 → Settings 左侧选择 SSH and GPG keys 点击 New SSH key 将复制的公钥粘贴进去，保存即可。 5. 测试连接在终端输入： 1ssh -T git@github.com 如果配置正确，会提示： 1Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 说明 SSH 配置成功。 6. 使用 SSH 克隆仓库以后在克隆 GitHub 仓库时，记得选择 SSH 地址，例如： 1git clone git@github.com:username/repository.git 这样就不需要再输入账号密码了。 总结配置 SSH Key 主要分为以下几步： 检查是否已有 SSH Key 生成新的 SSH Key 添加到 ssh-agent 将公钥添加到 GitHub 测试连接并使用 SSH 地址 配置完成后，你的 GitHub 操作就会更加方便和安全 🚀。","categories":[],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://wanderer-fly.github.io/tags/GitHub/"}]},{"title":"校服控の自拍照1","slug":"校服控の自拍照1","date":"2025-04-12T15:18:52.000Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"2025/04/12/校服控の自拍照1/","permalink":"https://wanderer-fly.github.io/2025/04/12/%E6%A0%A1%E6%9C%8D%E6%8E%A7%E3%81%AE%E8%87%AA%E6%8B%8D%E7%85%A71/","excerpt":"","text":"","categories":[],"tags":[{"name":"校服 自拍","slug":"校服-自拍","permalink":"https://wanderer-fly.github.io/tags/%E6%A0%A1%E6%9C%8D-%E8%87%AA%E6%8B%8D/"}]},{"title":"Apex被傻逼EA误封然后等误解","slug":"Apex被傻逼EA误封然后等误解","date":"2025-04-12T15:08:37.000Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"2025/04/12/Apex被傻逼EA误封然后等误解/","permalink":"https://wanderer-fly.github.io/2025/04/12/Apex%E8%A2%AB%E5%82%BB%E9%80%BCEA%E8%AF%AF%E5%B0%81%E7%84%B6%E5%90%8E%E7%AD%89%E8%AF%AF%E8%A7%A3/","excerpt":"","text":"起因2025.3.6在网吧打游戏被误封 经过下载EA data告诉我ANTI_CHEAT_BANNED 联系客服非说我没被ban，发ToS无回信 官网查询无禁令 结果2025.4.8发现已误解（）","categories":[],"tags":[{"name":"傻逼游戏","slug":"傻逼游戏","permalink":"https://wanderer-fly.github.io/tags/%E5%82%BB%E9%80%BC%E6%B8%B8%E6%88%8F/"}]},{"title":"IPv4、子网和网关","slug":"IP地址、子网掩码和网关","date":"2025-02-20T09:50:50.000Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"2025/02/20/IP地址、子网掩码和网关/","permalink":"https://wanderer-fly.github.io/2025/02/20/IP%E5%9C%B0%E5%9D%80%E3%80%81%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%92%8C%E7%BD%91%E5%85%B3/","excerpt":"","text":"IPv4地址的结构 IPv4地址是由32位二进制数组成，占用4个字节 组成部分分为网络号和主机号，IPv4地址分为五类，即A B C D E 他们的关系如图所示： A类地址 A类地址由1字节网络位和3字节主机位组成 第一位0是类别位，所以我们只有七位网络号可以使用 后面的24位为主机位 对于A类地址的结构可以表示为： 10 | 网络号（7位） | 主机号（24位） 其中，网络字段全0（即00000000）是一个保留字段，表示本地网络；网络字段127（即01111111）是另一个保留字段，用于环回地址（Loopback Address）（比如127.0.0.1表示本机），所以A类地址可以指派的有效网络数为： 12^7 - 2 = 128 - 2 = 126 有效的 A 类网络号范围是 11.0.0.0 - 126.0.0.0 B类地址 B类地址由2字节网络位和2字节主机位组成 前两位10为类别位，类别位后面的14位表示网络号 后面的16位表示主机号 对于B类地址的结构可以表示为： 11 0 | 网络号（14位） | 主机号（16位） 由于14 位可用来表示网络号，网络号的总数是： 12^14 = 16384 其中，128.0.0.0 是 B 类地址中的 最小有效网络号，因为它标志着 B 类地址空间的开始。因此， 128.0.0.0 不能作为一个有效的 B 类网络号。 去除一个保留地址 128.0.0.0，我们剩下的有效网络号个数，即B 类地址可以指派的有效网络号个数是： 12^14 - 1 = 16384 - 1 = 16383 C类地址 C类地址由3字节网络位和1字节主机位组成 前三位110为类别位，类别位后面的21位表示网络号 后面的8位表示主机号 C类地址的结构为 11 1 0 | 网络号（21 位） | 主机号（8 位） 由于21位可用来表示网络号，网络号的总数是： 1111111111111111111111（即 2^21 - 1 = 2097151） 但是192.0.0.0是C类地址的最小有效网络号，是 C 类地址空间的起始地址，它是一个保留地址，因此， 192.0.0.0被排除在有效网络号之外。 我们剩下的有效网络号个数为： 12^21 - 1 = 2097152 - 1 = 2097151 D类地址和E类地址D类地址为多播地址，E类地址为保留地址保留给今后使用 子网子网划分子网划分是网络管理中的一个常见过程，子网划分的目的是将一个网络划分为多个子网，每个子网可以拥有独立的地址空间。子网的目的是减少路由表的规模，并提高网络的可管理性和安全性。允许更有效地利用IP地址空间。 IP 地址的主机部分 被进一步拆分成了子网号和主机号 对于一个A类地址96.120.0.0，其中网络部分（注意此处96.120是一个二级网络而不是网络号，该例子中A类地址的网络号为96，即96.0.0.0），则剩下的16位为主机号，我们将主机号划分为8位子网号（Subnet ID）和8位主机号（Host ID） 子网划分后的格式为： 1网络号（96.120） | 子网号（8 位） | 主机号（8 位） 借8位主机号作为子网号，因此划分出来2^8 = 256个子网，其中全0子网表示网络地址，全1子网表示广播地址，不能被使用，所以我们有效的网络数位2^8 - 2 = 256 - 2 = 254个 每个子网中剩下8位作为主机号，可以分配给254台主机，即00000001到11111110 因此我们划分后的子网分别为： 12345第一个子网 96.120.0.0/24 有效主机地址范围：96.120.0.1 到 96.120.0.254第二个子网 96.120.1.0/24 有效主机地址范围：96.120.1.1 到 96.120.1.254第三个子网 96.120.2.0/24 有效主机地址范围：96.120.2.1 到 96.120.2.254……第256个子网 96.120.255.0/24 有效主机地址范围：96.120.255.1 到 96.120.255.254 网络地址与广播地址 网络地址 网络地址代表某个网络的唯一标识符，在该网络内，所有设备都与该网络相关联。 简单来说，网络地址用来指代该网络本身 例如，对于子网96.120.0.0/24，96.120.0.0表示这个网络的开始地址，所有主机范围从96.120.0.1开始到96.120.0.254结束 广播地址 广播地址用于在特定网络内发送广播消息 广播地址用于发送信息给网络中的所有主机，所有的主机收到该广播地址发出的数据包都会处理这些数据 广播地址是该子网中主机部分所有位都为1的地址 例如，对于子网96.120.0.0/24，96.120.0.255为该子网的广播地址 而对于子网96.120.0.0/28，子网掩码/28表示网络部分占28位，剩余4位是主机部分，所以，子网中有2^4 = 16个IP地址 要找广播地址，只需要将主机部分的4个位全部置为1 （广播地址是该子网中最大（最后）一个地址），因此该子网的广播地址为96.120.0.15 私有地址在IPv4地址协议中预留了3个IP地址段，作为私有地址，供组织机构内部使用。 A类地址：10.0.0.0–10.255.255.255 B类地址：172.16.0.0–172.31.255.255 C类地址：192.168.0.0–192.168.255.255 在外网上，不存在IP地址属于上述范围 子网掩码因此，为了实现一个子网的划分，我们需要一个合适的子网掩码（Subnet mask），子网掩码用于区分网络号、子网号和主机号 子网掩码的结构和IP地址类似，均为32位二进制数组成，通常写作四组十进制数，每组8位，用点分十进制表示，例如255.255.255.0的二进制表示为： 111111111.11111111.11111111.00000000 其中前24位1表示网络号和子网号，后8位0表示主机号 子网掩码的结构分为两部分，为网络部分（Network Part）和主机部分（Host Part） 网络部分对应子网掩码中的1，用于标识网络地址和子网地址，网络部分位数表示了该子网的大小 主机部分对应子网掩码中的0，用于标识具体的主机地址，主机部分位数决定了每个子网可以容纳的主机数量 其中A B C类地址默认子网掩码如下表： 地址 默子网掩码 A类地址 255.0.0.0 B类地址 255.255.0.0 C类地址 255.255.255.0 子网掩码与网络地址子网掩码与IP地址进行按位与运算，即子网掩码 AND IP地址，可以得到网络地址 对于一个IP地址192.168.1.100和子网掩码255.255.255.0，按位与运算： 1234IP地址 192.168.1.100 -&gt; 11000000.10101000.00000001.00000000子网掩码 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000-------------------------------------------------------------------网络地址 192.168.1.0 -&gt; 11000000.10101000.00000001.00000000 得到网络地址为192.168.1.0，**网络地址表示该IP所属的网络&#96; 子网掩码的常见表示方法子网掩码一般使用点分十进制和CIDR (Classless Inter-Domain Routing)表示，在UNIX中以CIDR更为常见而在Windows中则一般使用点分十进制的方式表示 123255.255.255.0 &lt;=&gt; /24 #网络部分24位255.255.0.0 &lt;=&gt; /16 #网络部分16位255.0.0.0 &lt;=&gt; /8 #网络部分8位 使用子网掩码来确定数据包的目的地有了子网掩码和总路由器，就能确定将数据转发到哪一个子网 对于某一网络96.120.0.0/18，网络部分（网络号+子网号占18位，剩下14位为主机号）的子网掩码为11111111.11111111.11000000.00000000，即255.255.192.0 每个子网有2^主机位数 - 2个地址即2^14 - 2 = 16382个可用的主机地址（操你妈我刚随手写的什么逆天例子） 假设外界要将一个数据发送到IP地址位96.120.238.250的主机，这个数据会先经过路由器，进入96.120.0.0/18这个网络中，要确定路由器要将该数据包转发到哪个子网中，首先需要将目标IP转换为二进制，即： 196.120.238.250 = 01100000.01111000.11101110.11111010 接下来，路由器将目标IP与子网掩码按位与运算，找出网络号+子网号： 1234目标IP 96.120.238.250 01100000.01111000.11101110.11111010子网掩码 255.255.192.0 11111111.11111111.11000000.00000000-------------------------------------------------------------------网络地址 01100000.01111000.11000000.00000000 计算得到的网络地址为： 101100000.01111000.11000000.00000000 = 96.120.192.0 表明96.120.238.250属于96.120.192.0/18这个子网 在96.120.238.250这个IP中，根据子网掩码的划分我们知道前18位为网络部分，即网络号+子网号，后14位属于主机号 该地址为一个A类地址，默认的子网掩码为255.0.0.0，所以网络号为8位，网络地址为18位，则子网长度为10位，即011100011，转换为十进制为227，主机为10111011111010，十进制为12026 路由器将数据转发到第227个子网上，再由子网路由器转发到第12026的主机上 网段要确定两台主机是否在同一网段，必须要做到网络标识相同 网络标识网络标识需要根据子网掩码的位数判断，只需要将IP地址和子网掩码进行按位与运算，例如 1234IP地址 192.168.0.1 11000000.10101000.00000000.00000001子网掩码 255.255.255.0 11111111.11111111.11111111.00000000---------------------------------------------------------------网络标识 192.168.0.0 11000000.10101000.00000000.00000000 其中的192.168.0.0就是网络标识 简而言之，两个主机的IP地址的网络号和子网号相同，则认为该两台主机处于同一网段 一般情况下，位于同一网段的两台主机可以 直接 访问 网关（Gateway）：内外网的连接点网关是一个网络层的概念 网关实际上是一个网络通向其他网络的IP地址，网关的IP地址是具有路由功能的设备的IP地址（一般来说是路由器、启用了路由功能的服务器或代理服务器）","categories":[],"tags":[{"name":"计算机网络 TCP/IP","slug":"计算机网络-TCP-IP","permalink":"https://wanderer-fly.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP-IP/"}]},{"title":"这里是蹦蹦小圆帽！","slug":"这里是蹦蹦小圆帽！","date":"2025-02-17T15:16:22.000Z","updated":"2025-08-19T16:19:25.651Z","comments":true,"path":"2025/02/17/这里是蹦蹦小圆帽！/","permalink":"https://wanderer-fly.github.io/2025/02/17/%E8%BF%99%E9%87%8C%E6%98%AF%E8%B9%A6%E8%B9%A6%E5%B0%8F%E5%9C%86%E5%B8%BD%EF%BC%81/","excerpt":"","text":"awa中推某神秘の校服控（沒有校服真的會死！！！）&amp;澀澀推主，喜歡可愛ㄉ小男孩🏳️‍🌈 正體中文🇹🇼&#x2F;简体中文🇨🇳&#x2F;English🇺🇸 坐標🇨🇳北方某省會，可以線下貼貼但是黃色禁止 年齡姓名是雷點，內心極度脆弱對別人批評比較敏感 GitHub上以前活躍現在半死不活的開發者（GitHub活躍度和心情成反比） 某二次元遊戲的微不足道的私服的開發者，Grasscutter早期貢獻者 以前是Java單推人，現轉生Node.js應付某些傻逼比賽 極度厭惡Python（💩）但是對於厭惡的東西就要用厭惡的東西來實現😅 其他的：Swift🎉 ArkTS💩 C#小男孩牛牛大 C++我不評價  Apple &amp; 小米萬歲！華為倒閉勢不可擋！！ macOS &amp; Linux &#x3D; ❤️ Arch教主萬歲 Windows只有打遊戲才會用 iOS &amp; Android &#x3D; ❤️ # Harmony 4.2不是OS而是UI &amp;&amp; HarmonyOS NEXT 🐶💩 政治中立，World Peace 🇨🇳🤝🇹🇼 🇷🇺🤝🇺🇦 🇮🇱🤝🇵🇸 🇰🇵🤝🇰🇷 原神國際服Asia&#x2F;Apex(可以陪你玩前提是你有母親)&#x2F;Valorant(新手)&#x2F;Minecraft","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://wanderer-fly.github.io/tags/GitHub/"},{"name":"校服 自拍","slug":"校服-自拍","permalink":"https://wanderer-fly.github.io/tags/%E6%A0%A1%E6%9C%8D-%E8%87%AA%E6%8B%8D/"},{"name":"傻逼游戏","slug":"傻逼游戏","permalink":"https://wanderer-fly.github.io/tags/%E5%82%BB%E9%80%BC%E6%B8%B8%E6%88%8F/"},{"name":"计算机网络 TCP/IP","slug":"计算机网络-TCP-IP","permalink":"https://wanderer-fly.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP-IP/"}]}